{"version":3,"sources":["modules/user/index.tsx","modules/ticket/curl.ts","modules/ticket/seller.tsx","modules/ticket/storage.ts","src/serviceWorkerRegistration.js","App.tsx","assets/adaptive-icon.png","assets/favicon.png","assets/icon.png","assets/splash.png"],"names":["m","props","useSafeState","loading","setLoading","user","UserClass","state","useSelector","s","ready","React","useRef","UseDeeplink","useLayoutEffect","limitReady","esp","config","Platform","OS","Version","isWorkerReady","onReady","_global","WorkerReady","setTimeout","current","fonts","fontsConfig","Object","keys","forEach","key","assets","Promise","r","j","Font","then","setFonts","isLogin","style","flex","View","initialState","undefined","handler","currentState","UserRoutes","set","backgroundColor","LibStyle","colorNavigationBar","height","isIphoneX","typeTicket","uri","post","onDone","onFailed","completeUrl","includes","protocol","domain","LibCurl","custom","res","ok","result","message","curl","msg","console","log","warn","ticketCurl","TicketCurl","padding","textStyle","text","onPress","sellerState","useGlobalState","persistKey","ticketState","ticketTempState","ticketSoldState","ticketSoldSyncState","ticketTypeState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","App","useEffect","globalIdx","reset","ErrorReport","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","enableFreeze","enableScreens","Notifications","x","LibNotification","onAction","module","exports"],"mappings":"oWAyDe,SAASA,EAAEC,GACxB,MAA8BC,wBAAa,GAAK,WAAzCC,EAAO,KAAEC,EAAU,KACpBC,EAAOC,YAAUC,QAAQC,aAAY,SAAAC,GAAC,OAAIA,KAC1CC,EAAQC,IAAMC,OAAO,GAC3BC,wBAyDA,OA5CAC,2BAAgB,WACd,IAAIC,EAAa,EAEgB,GAA7BC,MAAIC,OAAO,iBACbF,EAAa,GAGI,WAAfG,UAASC,IACPD,UAASE,SAAW,KACtBL,EAAa,GAIC,GAAdA,GA1CR,SAASM,EAAcC,GAEjBC,UAAQC,YAAc,EAExBC,YAAW,kBAAMJ,EAAcC,KAAU,IAEzCA,IAsCED,EAAc,WACZX,EAAMgB,SAAW,EACbhB,EAAMgB,SAAWX,GACnBX,GAAW,MAKjB,KAAC,kBAnEL,WACE,IAAIuB,EAAa,GACbC,EAAcZ,MAAIC,OAAO,SAM7B,OALIW,GACFC,OAAOC,KAAKd,MAAIC,OAAO,UAAUc,SAAQ,SAACC,GACxCL,EAAMK,GAAOhB,MAAIiB,OAAO,SAAWL,EAAYI,OAG5C,IAAIE,SAAQ,SAACC,EAAGC,GACrBC,YAAeV,GAAOW,MAAK,kBAAMH,UA2DzBI,GACN7B,EAAMgB,SAAW,EACbhB,EAAMgB,SAAWX,GACnBX,GAAW,KAJf,GAQAE,YAAUkC,QAAQ,iBAChB9B,EAAMgB,SAAW,EACbhB,EAAMgB,SAAWX,GACnBX,GAAW,SAMd,IAKD,eAAC,yBAAsB,CAACqC,MAAO,CAAEC,KAAM,GAAI,UACzC,eAAC,UAAI,CAACD,MAAO,CAAEC,KAAM,GAAI,UACvB,cAAC,UAAOC,KAAI,IAEVxC,EACE,cAAC,cAAW,IAEZ,qCACE,cAAC,cAAW,IACZ,cAAC,UAAI,CAACE,KAAMA,EAAMuC,kBAjEsBC,EAiEMC,QA/D1D,SAAiBC,GAMfC,aAAWC,IAAIF,MA2DL,cAAC,YAAS,CAACN,MAAO,YAClB,cAAC,WAAQ,IACT,cAAC,cAAW,IACZ,cAAC,WAAQ,IACT,cAAC,WAAQ,UAIjB,cAAC,UAAI,CAACA,MAAO,CAAES,gBAAiBC,WAASC,oBAAsB,QAASC,OAAQF,WAASG,UAAY,GAAK,U,iCCxIhH,mEAOe,SAAStD,IACtB,IAAMiB,EAASD,UAAIC,SAkBnB,MAAO,CACLsC,WARF,YAVA,SAAcC,EAAaC,EAAWC,EAAyCC,GAC7E,IAAMC,EAAcJ,EAAIK,SAAS,OAASL,EAASvC,EAAO6C,SAAQ,MAAM7C,EAAO8C,OAAM,IAAIP,GACzF,IAAIQ,WAAUC,OAAOL,EAAaH,GAAM,SAACS,GACzB,GAAVA,EAAIC,GACNT,EAAOQ,EAAIE,OAAQF,EAAIG,SAEvBV,EAASO,EAAKA,EAAIG,YAKtBC,CAAK,iEAAkE,MAAM,SAACJ,EAAKK,GACjFC,QAAQC,IAAIP,EAAKK,MAChB,SAACL,EAAKK,GACPC,QAAQE,KAAKR,EAAKK,U,iCCvBxB,yGAYe,SAASvE,EAAEC,GACxB,IAAM0E,EAAaC,uBACnB,OACE,eAAC,UAAI,CAACnC,MAAO,CAAEC,KAAM,EAAGmC,QAAS,IAAK,UACpC,cAAC,eAAY,CAACC,UAAU,OAAOC,KAAK,UACpC,cAAC,UAAS,CAACC,QAAS,WAAQL,EAAWpB,cAAe,SACpD,cAAC,UAAI,8B,iCClBb,2DAUM0B,EAAcC,uBAAmCrC,EAAW,CAAEsC,WAAY,kBAC1EC,EAAcF,kBAAsB,GAAI,CAAEC,WAAY,WACtDE,EAAkBH,kBAAsB,GAAI,CAAEC,WAAY,gBAC1DG,EAAkBJ,kBAAsB,GAAI,CAAEC,WAAY,gBAC1DI,EAAsBL,kBAAsB,GAAI,CAAEC,WAAY,qBAC9DK,EAAkBN,uBAAoBrC,EAAW,CAAEsC,WAAY,gBAEtD,SAASnF,IACtB,MAAO,CACLiF,cACAG,cACAC,kBACAG,kBACAF,kBACAC,yB,m8BCdEE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAuCN,SAASC,EAAgBC,EAAO/E,GAC9BgF,UAAUC,cACPC,SAASH,GACT1D,MAAK,SAAC8D,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/F,QACf0F,UAAUC,cAAcO,YAI1BjC,QAAQC,IACN,+GAKExD,GAAUA,EAAOyF,UACnBzF,EAAOyF,SAASN,KAMlB5B,QAAQC,IAAI,sCAGRxD,GAAUA,EAAO0F,WACnB1F,EAAO0F,UAAUP,WAO5BQ,OAAM,SAACC,GACNrC,QAAQqC,MAAM,4CAA6CA,M,WC/ElD,SAASC,IAMvB,OALAC,qBAAU,WACTC,YAAUC,QACVC,eACE,IAEK,cAAC,YAAS,KDFZ,SAAkBjG,GAEvB,GAAuB,kBAAmBgF,UAAW,CAGnD,GADkB,IAAIkB,IAAIC,QAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAWoB,0BAEb3B,IAgEV,SAAiCO,EAAO/E,GAEtCuG,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BnF,MAAK,SAACoF,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAcxF,MAAM4B,MAAK,SAAC8D,GAClCA,EAAa2B,aAAazF,MAAK,WAC7BqD,OAAOC,SAASoC,eAKpBjC,EAAgBC,EAAO/E,MAG1B2F,OAAM,WACLpC,QAAQC,IACN,oEAvFAwD,CAAwBjC,EAAO/E,GAI/BgF,UAAUC,cAAcxF,MAAM4B,MAAK,WACjCkC,QAAQC,IACN,+GAMJsB,EAAgBC,EAAO/E,OCxC/BiH,GACAC,yBACAC,0BAGAC,2CAAsD,SAAAC,GAAC,OAAIC,kBAAgBC,SAASF,O,69EChBpFG,EAAOC,QAAU,IAA0B,2C,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/app.fce3b08c.chunk.js","sourcesContent":["// withHooks\n// noPage\nimport { esp, useSafeState } from 'esoftplay';\nimport { LibDialog } from 'esoftplay/cache/lib/dialog/import';\nimport { LibImage } from 'esoftplay/cache/lib/image/import';\nimport { LibProgress } from 'esoftplay/cache/lib/progress/import';\nimport { LibStyle } from 'esoftplay/cache/lib/style/import';\nimport { LibToast } from 'esoftplay/cache/lib/toast/import';\nimport { LibWorkloop } from 'esoftplay/cache/lib/workloop/import';\nimport Navs from 'esoftplay/cache/navs';\nimport { UseDeeplink } from 'esoftplay/cache/use/deeplink/import';\nimport { UserClass } from 'esoftplay/cache/user/class/import';\nimport { UserHook } from 'esoftplay/cache/user/hook/import';\nimport { UserLoading } from 'esoftplay/cache/user/loading/import';\nimport { UserRoutes } from 'esoftplay/cache/user/routes/import';\nimport Worker from 'esoftplay/libs/worker';\nimport _global from 'esoftplay/_global';\nimport * as Font from \"expo-font\";\nimport React, { useLayoutEffect } from 'react';\nimport { Platform, View } from \"react-native\";\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport interface UserIndexProps {\n\n}\n\nexport interface UserIndexState {\n  loading: boolean\n}\n\nfunction setFonts(): Promise<void> {\n  let fonts: any = {}\n  let fontsConfig = esp.config(\"fonts\")\n  if (fontsConfig) {\n    Object.keys(esp.config(\"fonts\")).forEach((key) => {\n      fonts[key] = esp.assets('fonts/' + fontsConfig[key])\n    })\n  }\n  return new Promise((r, j) => {\n    Font.loadAsync(fonts).then(() => r())\n  })\n}\n\n\n\nfunction isWorkerReady(onReady: () => void): void {\n  // @ts-ignore\n  if (_global.WorkerReady < 1) {\n    \n    setTimeout(() => isWorkerReady(onReady), 10)\n  } else {\n    onReady()\n  }\n}\n\n\n\nexport default function m(props: UserIndexProps): any {\n  const [loading, setLoading] = useSafeState(true)\n  const user = UserClass.state().useSelector(s => s)\n  const ready = React.useRef(0)\n  UseDeeplink()\n  //@ts-ignore\n  const initialState = __DEV__ ? _global.nav__state : undefined\n\n  function handler(currentState: any): void {\n    //@ts-ignore\n    if (__DEV__) {\n      //@ts-ignore\n      _global.nav__state = currentState\n    }\n    UserRoutes.set(currentState)\n  }\n\n  useLayoutEffect(() => {\n    let limitReady = 2\n\n    if (esp.config(\"asyncWorker\") == true) {\n      limitReady = 2\n    }\n\n    if (Platform.OS == 'android') {\n      if (Platform.Version <= 22) {\n        limitReady = 2\n      }\n    }\n\n    if (limitReady == 3) {\n      \n      isWorkerReady(() => {\n        ready.current += 1\n        if (ready.current >= limitReady) {\n          setLoading(false)\n        }\n      })\n    }\n\n    (async () => {\n      await setFonts()\n      ready.current += 1\n      if (ready.current >= limitReady) {\n        setLoading(false)\n      }\n    })()\n\n    UserClass.isLogin(async () => {\n      ready.current += 1\n      if (ready.current >= limitReady) {\n        setLoading(false)\n      }\n    })\n    //esoftplay-chatting\n\n    \n  }, [])\n\n  \n\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <View style={{ flex: 1 }}>\n        <Worker.View />\n        {\n          loading ?\n            <UserLoading />\n            :\n            <>\n              <LibWorkloop />\n              <Navs user={user} initialState={initialState} handler={handler} />\n              {/* <LibNet_status /> */}\n              <LibDialog style={'default'} />\n              <LibImage />\n              <LibProgress />\n              <LibToast />\n              <UserHook />\n            </>\n        }\n      </View>\n      <View style={{ backgroundColor: LibStyle.colorNavigationBar || 'white', height: LibStyle.isIphoneX ? 35 : 0 }} />\n    </GestureHandlerRootView>\n  )\n}\n","// useLibs\n\nimport { LibCurl } from 'esoftplay/cache/lib/curl/import';\nimport esp from 'esoftplay/esp';\n\n\nexport interface TicketCurlProps {\n  typeTicket: Function\n}\nexport default function m(): TicketCurlProps {\n  const config = esp.config()\n  function curl(uri: string, post: any, onDone: (res: any, msg: string) => void, onFailed: (res: any, msg: string) => void) {\n    const completeUrl = uri.includes(\"://\") ? uri : `${config.protocol}://${config.domain}/${uri}`\n    new LibCurl().custom(completeUrl, post, (res: any) => {\n      if (res.ok == 1) {\n        onDone(res.result, res.message)\n      } else {\n        onFailed(res, res.message)\n      }\n    });\n  }\n  function fetchType() {\n    curl('print-ticket-only.html/?is_ajax=ticket_seller_type&event_id=19', null, (res, msg) => {\n      console.log(res, msg)\n    }, (res, msg) => {\n      console.warn(res, msg)\n    })\n  }\n  return {\n    typeTicket: fetchType\n  }\n}","// withHooks\n\nimport { LibTextstyle } from 'esoftplay/cache/lib/textstyle/import';\nimport { TicketCurl } from 'esoftplay/cache/ticket/curl/import';\nimport React from 'react';\nimport { Pressable, Text, View } from 'react-native';\n\n\nexport interface TicketSellerArgs {\n\n}\nexport interface TicketSellerProps {\n\n}\nexport default function m(props: TicketSellerProps): any {\n  const ticketCurl = TicketCurl();\n  return (\n    <View style={{ flex: 1, padding: 20 }} >\n      <LibTextstyle textStyle='m_h2' text='KASIR' />\n      <Pressable onPress={() => { ticketCurl.typeTicket() }} >\n        <Text>DOWNLOAD</Text>\n      </Pressable>\n    </View >\n  )\n}","// useLibs\n\nimport useGlobalState, { useGlobalReturn } from 'esoftplay/global';\n\nexport interface TicketStorageProps {\n  sellerState: useGlobalReturn<string | undefined>,\n  ticketState: useGlobalReturn<any[]>,\n  ticketTempState: useGlobalReturn<any[]>,\n  ticketTypeState: useGlobalReturn<any>,\n  ticketSoldState: useGlobalReturn<any[]>,\n  ticketSoldSyncState: useGlobalReturn<any[]>,\n}\nconst sellerState = useGlobalState<string | undefined>(undefined, { persistKey: 'seller_ticket' })\nconst ticketState = useGlobalState<any[]>([], { persistKey: 'ticket' })\nconst ticketTempState = useGlobalState<any[]>([], { persistKey: 'ticket_temp' })\nconst ticketSoldState = useGlobalState<any[]>([], { persistKey: 'ticket_sold' })\nconst ticketSoldSyncState = useGlobalState<any[]>([], { persistKey: 'ticket_sold_sync' })\nconst ticketTypeState = useGlobalState<any>(undefined, { persistKey: 'ticket_type' })\n\nexport default function m(): TicketStorageProps {\n  return {\n    sellerState,\n    ticketState,\n    ticketTempState,\n    ticketTypeState,\n    ticketSoldState,\n    ticketSoldSyncState,\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  const isEnvProduction = process.env.NODE_ENV === \"production\";\n  if (isEnvProduction && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","\nimport { LibNotification } from 'esoftplay/cache/lib/notification/import';\nimport { UserIndex } from 'esoftplay/cache/user/index/import';\nimport * as ErrorReport from 'esoftplay/error';\nimport { globalIdx } from 'esoftplay/global';\nimport * as Notifications from 'expo-notifications';\nimport React, { useEffect } from 'react';\nimport { enableFreeze, enableScreens } from 'react-native-screens';\n\t\t\n\nimport * as serviceWorkerRegistration from \"./src/serviceWorkerRegistration\";\nserviceWorkerRegistration.register();\nenableFreeze()\nenableScreens()\n\t\t\n\nNotifications.addNotificationResponseReceivedListener(x => LibNotification.onAction(x));\n\nexport default function App() {\n\tuseEffect(() => {\n\t\tglobalIdx.reset()\n\t\tErrorReport.getError()\n\t}, [])\n\n\treturn (<UserIndex />)\n}","module.exports = __webpack_public_path__ + \"static/media/adaptive-icon.026903ef.png\";","module.exports = __webpack_public_path__ + \"static/media/favicon.aab372b4.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.026903ef.png\";","module.exports = __webpack_public_path__ + \"static/media/splash.d36b91f0.png\";"],"sourceRoot":""}